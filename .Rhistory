out0.bj <- send.down.VI.ITR(dat.new=dat.permuted, tre=tre0.b, col.y=col.y, col.trt=col.trt,
col.prtx=col.prtx, ctg=ctg, n0=n0, N0=N0, revise.tree=F,depth=1,AIPWE = AIPWE)
tre0.bj <- out0.bj$tre0
G.j <- ifelse(nrow(tre0.bj) ==1, G.oob, out0.bj$score)
}
if (G.j > G.oob) G.j <- G.oob
##################### PREVENTS NEGATIVE IMPORTANCE VALUES
VI[j] <- VI[j] + (G.oob - G.j)/G.oob
}
}
}
if (truncate.zeros) VI[VI <0] <- 0  		####### IS THIS STEP NECESSARY? NOPE.
names(VI) <- vnames
if (sort) VI <- sort(VI, decreasing=T)
VI<-VI/sum(VI)
return(VI)
}
# ------------------------------------------------------------------
# THIS senddown FUNCTION IS WRITTEN FOR THE VARIABLE IMPORTANCE PART
# USING RANDOM FORESTS
# ------------------------------------------------------------------
send.down.VI.ITR<-function(dat.new, tre, col.y, col.trt, col.prtx, ctg=NULL, n0=n0, N0=N0, revise.tree=T,depth=1, AIPWE = AIPWE)
{
#Retrieve information from the bootstrap sample tree
node.dat <- rep(0, nrow(dat.new))   		# COLUMNS CAN BE ADDED TO DATA
cut.point <- as.vector(tre$cut.2)
cut.direct <- as.vector(tre$cut.1)
split.var <- as.numeric(as.vector(tre$var))
y <- dat.new[, col.y]
trt <- dat.new[, col.trt]
prtx <- dat.new[,col.prtx]
nd <- dim(tre)[1]
tre0 <- tre # REVISED TREE
tre0$n.test <- rep(NA, nrow(tre))
tre0$score.test <- rep(NA, nrow(tre)) # COLUMNS CAN BE ADDED TO TREE
i <- 1
zz <- rep(0,nrow(dat.new))
while (i <= nrow(tre0)){
node.i <- tre0$node[i]
in.node <- (node.dat == node.i)
y0 <- y[in.node]
trt0 <- trt[in.node]
prtx0 <- prtx[in.node]
dat0 <- data.frame(y=y0, trt=trt0, prtx=prtx0)
n.0 <- length(y0)
tre0$n.test[i] <- n.0
t2 <- NA
if (!is.na(split.var[i])){
x.split <- dat.new[,split.var[i]];
cut <- cut.point[i]
cut.d <- cut.direct[i]
if (!is.element(split.var[i], ctg)) {
cut1 <- as.numeric(cut)
l.nd <- node.dat[in.node & x.split <= cut1]
r.nd <- node.dat[in.node & x.split > cut1]
z <- sign(x.split[in.node] <= cut1)
node.dat[in.node & x.split <= cut1] <- paste(l.nd, 1, sep="")
node.dat[in.node & x.split >  cut1] <- paste(r.nd, 2, sep="")
if(i <= depth){
if(cut.d=="l") {
zz[in.node & x.split <= cut1] <- 1
} else {
zz[in.node & x.split > cut1] <- 0
}
}
}
else {
cut1 <- unlist(strsplit(as.character(cut), split=","))
l.nd <- node.dat[in.node & is.element(x.split, cut1)]
r.nd <- node.dat[in.node & !is.element(x.split, cut1)]
z <- sign(is.element(x.split[in.node], cut1))
node.dat[in.node & is.element(x.split, cut1)] <- paste(l.nd, 1, sep="")
node.dat[in.node & !is.element(x.split, cut1)] <- paste(r.nd, 2, sep="")
}
t2 <- itrtest(dat0, z, n0=n0, AIPWE)
tre0$score.test[i] <- t2
}
if (is.na(t2) && revise.tree) {
node.rm <-  de(node.i, tre0)
tre0 <- tre0[!is.element(tre0$node, node.rm), ]
tre0[tre0$node==node.i, c("var", "vname", "cut.1", "cut.2", "score")] <- NA
}
i <- i+1
}
node<-substr(node.dat,1,nchar(node.dat)-1)
direction<-substr(node.dat,nchar(node.dat),nchar(node.dat))
trt.dir<-tre0[match(node, tre0$node),]$cut.1
trt.pred<-ifelse(trt.dir=="r" & direction=="1",0,
ifelse(trt.dir=="r" & direction=="2",1,
ifelse(trt.dir=="l" & direction=="1",1,0)))
out  <- list(tre0=tre0,score=itrtest(dat.new, trt.pred, n0=n0, AIPWE))
return(out)
}
# ==============================================================
# FUNCTION send.down() RUNS A TREE STRUCTURE DOWN A DATA SET
# ==============================================================
send.down <- function(dat.new, tre, char.var=1000, ctgs=NULL)
{
call <- match.call()
out <- match.call(expand = F)
out$tree <- out$data <- out$... <- NULL
dats <- cbind(dat.new, node=0)
tre.new <- cbind(tre, n.test=NA)
cut.point <- as.vector(tre$cut.2)
split.v <- as.numeric(as.vector(tre$var))
for (i in 1:nrow(tre)){
in.node <- (dats$node)==(tre.new$node[i])
tre.new$n.test[i] <- sum(in.node)
if (!is.na(split.v[i])){
# print(cbind(i, var=tre$var[i], cut=tre$cut[i]))
var.split <- dats[,split.v[i]]
cut <- cut.point[i]
if (!is.element(split.v[i], char.var)) {
if(is.element(split.v[i], ctgs)){
cut1 <- as.character(strsplit(cut, split = ",")[[1]])
l.nd <- dats$node[in.node & is.element(var.split, cut1)]
r.nd <- dats$node[in.node & !is.element(var.split, cut1)]
dats$node[in.node & is.element(var.split, cut1)] <- paste(l.nd, 1, sep="")
dats$node[in.node & !is.element(var.split, cut1)] <- paste(r.nd, 2, sep="")
} else{
cut1 <- as.numeric(cut)
l.nd <- dats$node[in.node & var.split <= cut1]
r.nd <- dats$node[in.node & var.split > cut1]
dats$node[in.node & var.split <= cut1] <- paste(l.nd, 1, sep="")
dats$node[in.node & var.split >  cut1] <- paste(r.nd, 2, sep="")
}
} else {
var.split <- as.character(var.split)
cut1 <- unlist(strsplit(as.character(cut), split=" ")) #####################
l.nd <- dats$node[in.node & is.element(var.split, cut1)]
r.nd <- dats$node[in.node & !is.element(var.split, cut1)]
dats$node[in.node & is.element(var.split, cut1)] <- paste(l.nd, 1, sep="")
dats$node[in.node & !is.element(var.split, cut1)] <- paste(r.nd, 2, sep="")
}
}
}
# print(tre)
out$data <- dats
out$tree <- tre.new
out
}
# =====================================================================
# FUNCTION plot.VI() PLOTS VARIABLE IMPORTANCE MEASURES USING bar.plot
# =====================================================================
plot.VI <- function(VI, filename=NULL, horizontal=T, rain.bow=T)
{
library(RColorBrewer)
if (!is.null(filename)) postscript(file=filename, horizontal=horizontal)
par(mfrow=c(1, 1), mar = c(7, 4, 7, 4));
require(grDevices)
p <- length(VI)
color0 <- gray(0:(p - 1)/(p - 1))
if (rain.bow) color0 <- brewer.pal(p, "YlOrRd")
barplot(VI, col=color0, names.arg = names(VI), ylab="Importance (Proportion)", xlab="Variable",
cex.names = 1.2,  las=3);  # TO HAVE VERTICAL AXIS LABELING
text(x=Variable, y=VI, labels=VI, pos=3, xpd=NA)
title(main = list("Variable Importance Rank",  font = 4, cex = 1.4));
if (!is.null(filename)) dev.off()
}
# =====================================================================
# Pruning procedures for selecting optimal tree from a large tree
# =====================================================================
# OPTION LeBlanc IS TO APPLY THE WHOLE SAMPLE (TRUE) OR THE OUT-OF-BAD SAMPLE (FALSE) IN THE BOOTSTRAP PROCEDURE
# OPTION min.boot.tree.size IS TO MAKE SURE A NON-NULL TREE IS GROWN AT EACH BOOTSTRAP 11/1/2007
boottrap.grow.prune <- function(B=30, data, N0=20, n0=5, a=5,
split.var, ctg=NULL, max.depth=10,
mtry=length(split.var), LeBlanc=TRUE, min.boot.tree.size=1)
{
call <- match.call()
out <- match.call(expand = F)
out$boot.tree <- out$boot.prune <- out$... <- NULL
time.start <- date()
tree0 <- grow.ITR(data, data, min.ndsz=N0, n0=n0, split.var=split.var, ctg=ctg,
max.depth=max.depth, mtry=mtry)
print(tree0)
prune0 <- prune.size.pen(tree0, a)
boot.tree <- list(tree0)
boot.prune <- list(prune0)
b <- 1
while (b <= B) {
print(paste("###################### b = ", b, " ###########################", sep=""))
# SAMPLING OBSERVATION
samp <- sample(1:nrow(data), size=nrow(data), replace=T)
dat <- data[samp, ]
dat.oob <- data[-unique(samp),]
n.oob <- nrow(dat.oob) # print(n.oob)
if (LeBlanc) {tre <- grow.ITR(dat, data, min.ndsz=N0, n0=n0, split.var=split.var,
ctg=ctg, max.depth=max.depth, mtry=mtry)}
else {tre <- grow.ITR(dat, dat.oob, min.ndsz=N0, n0=n0, split.var=split.var, ctg=ctg,
max.depth=max.depth, mtry=mtry)}
print(tre)
if (nrow(tre)> min.boot.tree.size) {
boot.tree <- c(boot.tree, list(tre))
prune <- prune.size.pen(tre, a=a) # print(prune)
boot.prune <- c(boot.prune, list(prune))
b <- b+1
}
}
time.end <- date()
print(paste("The Start and End time for ", B, "bootstrap runs is:"))
print(rbind(time.start, time.end))
out$boot.tree <- boot.tree
out$boot.prune <- boot.prune
# THE INITIAL LARGE TREE
out$initial.tree <- tree0
out
}
#========================================================================
# Pruning function with modified value calculation
#========================================================================
#------------------------------------------------------------------------------------------------------
# This function will perform bootstrap sampling to grow and prune a large tree, then validates using the OOB sample
# The goal is to tune the pruning parameter lambda
#------------------------------------------------------------------------------------------------------
prune <- function(tre, a, train, test=NULL, AIPWE = F, n0=5){
if(is.null(dim(tre))) stop("No Need to Prune Further.")
result <- NULL
n.tmnl <- sum(is.na(tre$var))
subtree <- 1
while (n.tmnl > 1 ) {
#internal keeps track of all splits which are not terminal <NA> for score value
internal <- tre$node[!is.na(tre$cut.1)]
l <- length(internal)
#r.value is the vector of mean score values across all splits
r.value <- 1:l
for(j in 1:l) {
#branch keeps track of all splits (terminal or not)
#branch is a single path which can be followed down a given tree
sub.tree <- tre[!is.element(tre$node,de(internal[j], tree=tre)),]
if(nrow(sub.tree)>1){
if(!is.null(test)) sub.tree[sub.tree$node==internal[j],][6:11] <- NA
if(is.null(test)) sub.tree[sub.tree$node==internal[j],][6:10] <- NA
trt.pred <- predict.ITR(sub.tree, train)$trt.pred
score <- itrtest(dat = train, z=trt.pred, n0=n0, AIPWE)
}else{
score <- max(itrtest(train, rep(0,nrow(train)), 0, AIPWE), itrtest(train, rep(1,nrow(train)), 0, AIPWE))
}
#r.value is a penalized mean value score across all internal nodes
r.value[j] <- score #dim(branch)[1] - nchar(internal[j]) + score[1]/1000
}
alpha <-max(r.value, na.rm = T)
nod.rm <- internal[r.value==alpha]
# if (length(nod.rm)>1) print("Multiple Nodes will be pruned. Check!")
trt.pred <- predict.ITR(tre, train)$trt.pred
V <- itrtest(dat = train, z=trt.pred, n0=n0, AIPWE)
V.a <- V - a*sum(!is.na(tre$score))
if(!is.null(test)){
# Calculate value for the training set
trt.pred <- predict.ITR(tre, test)$trt.pred
V.test <- itrtest(dat = test, z=trt.pred, n0=-1, AIPWE)
Va.test <- V.test - a*sum(!is.na(tre$score))
}
# Calculate value for testing data
if(is.null(test)) {result <- rbind(result, cbind(subtree=subtree, node.rm=nod.rm, size.tree=nrow(tre),
size.tmnl=nrow(tre)-l, alpha=alpha, V=V, V.a=V.a, V.test=NA, Va.test=NA))}
if(!is.null(test)) {result <- rbind(result, cbind(subtree=subtree, node.rm=nod.rm, size.tree=nrow(tre),
size.tmnl=nrow(tre)-l, alpha=alpha, V=V, V.a=V.a, V.test=V.test, Va.test=Va.test))}
if(length(nod.rm)>1){
for(k in 1:length(nod.rm)){
tre <- tre[!is.element(tre$node, de(nod.rm[k],tre)),]
if(is.null(test)) tre[match(nod.rm[k], tre$node), c("var", "vname", "cut.1", "cut.2", "score")] <- NA
if(!is.null(test))  tre[match(nod.rm[k], tre$node), c("var", "vname", "cut.1", "cut.2", "score", "score.test")] <- NA
n.tmnl <- sum(is.na(tre$cut.1))
subtree <- subtree + 1
}
} else{
tre <- tre[!is.element(tre$node, de(nod.rm,tre)),]
if(is.null(test)) tre[match(nod.rm, tre$node), c("var", "vname", "cut.1", "cut.2", "score")] <- NA
if(!is.null(test))  tre[match(nod.rm, tre$node), c("var", "vname", "cut.1", "cut.2", "score", "score.test")] <- NA
n.tmnl <- sum(is.na(tre$cut.1))
subtree <- subtree + 1
}
}
# HANDLE THE NULL TREE WITH THE ROOT NODE ONLY
if(!is.null(test)){
result <- rbind(result, cbind(subtree=subtree, node.rm='NA', size.tree=nrow(tre),
size.tmnl=1, alpha=9999,
V=max(itrtest(train, rep(1,nrow(train)), 5, AIPWE), itrtest(train, rep(0, nrow(train)), 5, AIPWE)),
V.a=max(itrtest(train, rep(1,nrow(train)), 5, AIPWE), itrtest(train, rep(0, nrow(train)), 5, AIPWE)),
V.test=max(itrtest(test, rep(1,nrow(test)), 5, AIPWE), itrtest(test, rep(0, nrow(test)), 5, AIPWE)),
Va.test=max(itrtest(test, rep(1,nrow(test)), 5, AIPWE), itrtest(test, rep(0, nrow(test)), 5, AIPWE))))
}else{
result <- rbind(result, cbind(subtree=subtree, node.rm='NA', size.tree=nrow(tre),
size.tmnl=1, alpha=9999,
V=max(itrtest(train, rep(1,nrow(train)), 5, AIPWE), itrtest(train, rep(0, nrow(train)), 5, AIPWE)),
V.a=max(itrtest(train, rep(1,nrow(train)), 5, AIPWE), itrtest(train, rep(0, nrow(train)), 5, AIPWE)),
V.test=NA, Va.test=NA))
}
result <- as.data.frame(result)
result
}
#------------------------------------------------------------------------------------------------------
# This function uses the function prune() along with k-fold CV to return the mean cross validated value
#   for a given penalty parameter (param).  If graphic = T is specified also specify a graphicname compatible
#   with postscript() (such as .eps) and a plot of the results will be generated.
#------------------------------------------------------------------------------------------------------
PruneCV<-function(data, param, min.ndsz, n0, split.var, graphic=FALSE, nfolds, graphicname=NULL, AIPWE = F){
tree<-prune.tree<-out<-NULL
pb <- txtProgressBar(min = 0, max = length(param), style = 3)
for(x in 1:length(param)){
data<-data[sample(1:nrow(data),nrow(data)),]
folds <- cut(seq(1,nrow(data)),breaks=nfolds,labels=FALSE)
comb <- NULL
for(i in 1:nfolds){
#Segement data
testIndexes <- which(folds==i,arr.ind=TRUE)
test <- data[unique(testIndexes), ]
train <- data[-unique(testIndexes), ]
tree<-grow.ITR(data = train, test=test, split.var=split.var,
min.ndsz = min.ndsz, n0=n0, AIPWE = AIPWE, max.depth = 10)
prune.tree<-prune(tree, param[x], train=train, test=test, AIPWE = AIPWE)
comb <- rbind(comb, prune.tree)
}
#obtain aggregated summaries
col1 <- aggregate(as.numeric(comb[,9]), FUN=mean, by=list(comb[,4]), na.rm=T)
col2 <- aggregate(as.numeric(comb[,9]), FUN=sd, by=list(comb[,4]), na.rm=T)
col3 <- aggregate(as.numeric(comb[,9]), FUN=length, by=list(comb[,4]))
#merge them together
opt<-Reduce(function(x, y) merge(x, y, by="Group.1"), list(col1, col2, col3))
opt$Parameter <- as.factor(param[x])
#generate the output data frame
out <- rbind(out, opt)
setTxtProgressBar(pb, value=x)
}
close(pb)
out<-data.frame(out)
names(out) <- c("n.tmnl", "MeanValue", "SDValue","Length", "Parameter")
#plot graphic if indicated
if((graphic)){
postscript(file = graphicname)
p <- ggplot(data=out[which(out$Length>4 & as.numeric(out$n.tmnl)<=10),], aes(x=as.numeric(n.tmnl), y=exp(MeanValue), group=Parameter))
p <- p + geom_line(aes(linetype=Parameter))
p <- p + xlab("Number of Terminal Nodes") + ylab(expression(exp~V[lambda](T)))
p <- p + theme(axis.title.x=element_text(size=24)) + theme(axis.title.y=element_text(size=24))
p <- p + theme(axis.text.x=element_text(size=20)) + theme(axis.text.y=element_text(size=20))
p <- p + theme(legend.position=c(0.9,0.5)) + scale_x_continuous(breaks = seq(1,max(as.numeric(out$n.tmnl)),1))
p <- p + theme(legend.title=element_text(size=18) , legend.text=element_text(size=14))
p <- p + theme(panel.background=element_blank()) + theme(axis.line = element_line(colour = "black"))
print(p)
dev.off()
}
return(out)
}
treeCV <- function(tre, dat, nfolds = 5, param = seq(0, 0.15, 0.01),
AIPWE = FALSE, N0=20, n0=5, sp.var, sort=FALSE){
input.tre <- tre
input.dat <- dat
# Shuffle data
if(sort) input.dat <- input.dat[sample(1:nrow(input.dat), size = nrow(input.dat), replace = FALSE),]
folds <- cut(seq(1,nrow(input.dat)), breaks = nfolds, labels = FALSE)
in.train <- in.test <- trees <- list()
result <- NULL
for(k in 1:nfolds){
in.train[[k]] <- input.dat[-which(folds==k,arr.ind=TRUE),]
in.test[[k]]  <- input.dat[which(folds==k,arr.ind=TRUE),]
trees[[k]] <- grow.ITR(in.train[[k]], in.test[[k]], split.var = sp.var,
min.ndsz = N0, n0=n0, AIPWE = AIPWE)
}
out <- matrix(0, ncol = length(trees), nrow = length(param))
for(t in 1:length(trees)){
pru <- prune(trees[[t]], 0, in.train[[t]], in.test[[t]], AIPWE = FALSE)
for(j in 1:length(param)){
row <- which.max(as.numeric(pru$V) - (param[j])*(as.numeric(pru$size.tree)-as.numeric(pru$size.tmnl)))
out[j, t] <- as.numeric(pru$V.test)[row]
}
}
result <- cbind(apply(out, 1, mean), apply(out, 1, sd))
result2 <- data.frame(Parameter=param, m=result[,1], SD=result[,2], lower=result[,1]-result[,2]/sqrt(length(trees)),
upper=result[,1]+result[,2]/sqrt(length(trees)))
best.lam <- result2$Parameter[which(as.numeric(as.vector(result2$m))==max(as.numeric(as.vector(result2$m))))][1]
pruned <- prune(input.tre, best.lam, input.dat, AIPWE = FALSE)
row.prune <- as.numeric(pruned$subtree[as.numeric(pruned$V.a)==max(as.numeric(as.vector(pruned$V.a)))])[1]
best.tree <- input.tre
if(row.prune > 1){
for(i in 1:(row.prune-1)){
best.tree <- best.tree[!is.element(best.tree$node, de(pruned$node.rm[i], best.tree)),]
if(dim(best.tree)[2]==12) best.tree[which(best.tree$node==pruned$node.rm[i]), 6:11] <- NA
if(dim(best.tree)[2]==10) best.tree[which(best.tree$node==pruned$node.rm[i]), 6:10] <- NA
}
}
out <- list()
out$best.tree <- best.tree
out$best.lambda <- best.lam
out$full.tree <- input.tre
out$pruned.tree <- pruned
out$data <- input.dat
out$details <- result2
return(out)
}
treeMC <- function(tre, dat, ntrees = 20, param = seq(0, 0.15, 0.01),
AIPWE = F, N0=20, n0=5, sp.var){
input.tre <- tre
input.dat <- dat
forest <- Build.RF.ITR(input.dat, test = T, col.y = "y", col.trt = "trt", col.prtx = "prtx",
ntree = ntrees, mtry = length(sp.var), avoid.nul.tree = T,
AIPWE = F, split.var = sp.var, N0 = N0, n0 = n0)
in.train <- in.test <- list()
trees <- forest$TREES
result <- NULL
for(k in 1:ntrees){
in.train[[k]] <- dat[unique(forest$ID.Boots.Samples[[k]]), ]
in.test[[k]]  <- dat[-unique(forest$ID.Boots.Samples[[k]]), ]
}
for(j in param){
out <- NULL
for(t in 1:length(trees)){
pru <- prune(trees[[t]], j, in.train[[t]], in.test[[t]], AIPWE = F)
out <- c(out, as.numeric(pru$V.test[as.numeric(pru$V.a)==max(as.numeric(as.vector(pru$V.a)))]))
}
result <- rbind(result, c(mean(out, na.rm=T), sd(out, na.rm=T)))
}
result2 <- data.frame(Parameter=param, m=result[,1], SD=result[,2], lower=result[,1]-result[,2]/sqrt(length(trees)),
upper=result[,1]+result[,2]/sqrt(length(trees)))
best.lam <- result2$Parameter[which(as.numeric(as.vector(result2$m))==max(as.numeric(as.vector(result2$m))))][1]
pruned <- prune(input.tre, best.lam, input.dat, AIPWE = F)
row.prune <- as.numeric(pruned$subtree[as.numeric(pruned$V.a)==max(as.numeric(as.vector(pruned$V.a)))])
best.tree <- input.tre
if(row.prune > 1){
for(i in 1:(row.prune-1)){
best.tree <- best.tree[!is.element(best.tree$node, de(pruned$node.rm[i], best.tree)),]
if(dim(best.tree)[2]==12) best.tree[which(best.tree$node==pruned$node.rm[i]), 6:11] <- NA
if(dim(best.tree)[2]==10) best.tree[which(best.tree$node==pruned$node.rm[i]), 6:10] <- NA
}
}
out <- list()
out$best.tree <- best.tree
out$best.lambda <- best.lam
out$full.tree <- input.tre
out$pruned.tree <- pruned
out$data <- input.dat
out$details <- result2
return(out)
}
#====================================================================
# Prediction function for tree or forest object
#====================================================================
predict.ITR <- function(input, new.dat){
if(is.null(dim(input))) trees <- input$TREES
if(!is.null(dim(input))) trees <- input
dat <- new.dat
n <- nrow(dat)
if(is.null(dim(input))) n.trees <- length(trees)
if(!is.null(dim(input))) n.trees <- 1
out <- NULL
result <- NULL
for(i in 1:n.trees){
if(is.null(dim(input))) tre <- trees[[i]]
if(!is.null(dim(input))) tre <- trees
if(nrow(tre)>1){
send<-send.down(dat.new = dat, tre = tre)
node<-substr(send$data$node,1,nchar(send$data$node)-1)
direction<-substr(send$data$node,nchar(send$data$node),nchar(send$data$node))
trt.dir<-tre[match(node,tre$node),]$cut.1
trt.pred<-ifelse(trt.dir=="r" & direction=="1",0,
ifelse(trt.dir=="r" & direction=="2",1,
ifelse(trt.dir=="l" & direction=="1",1,0)))
}else{
if(is.null(dim(input))) trt.pred <- rep(NA, n)
if(!is.null(dim(input))) trt.pred <- NA
}
result <- rbind(result, trt.pred)
}
out$SummaryTreat <- apply(result, 2, FUN = mean, na.rm=T)
if(is.null(dim(input))) out$trt.pred <- ifelse(out$SummaryTreat<0.5, 0, 1)
if(!is.null(dim(input))) out$trt.pred <- out$SummaryTreat
out$n.trees <- n.trees
out$tree.votes <- result
out$data <- new.dat
out$NA.trees <- sum(is.na(result[,1]))
return(out)
}
set.seed(1)
dat <- rdat(5000)
tre <- grow.ITR(dat, split.var = 1:4)
tre
set.seed(1)
dat <- rdat(5000)
tre <- grow.ITR(dat, split.var = 1:4, min.ndsz = 5, n0 = 2)
tre
set.seed(1)
dat <- rdat(5000, depth = 2)
tre <- grow.ITR(dat, split.var = 1:4, min.ndsz = 5, n0 = 2)
tre
set.seed(1)
dat <- rdat(1000, depth = 2)
tre <- grow.ITR(dat, split.var = 1:4, min.ndsz = 5, n0 = 2)
tre
set.seed(1)
dat <- rdat(1000, depth = 2)
tre <- grow.ITR(dat, split.var = 1:4, min.ndsz = 5, n0 = 2)
cv.prune <- treeCV(tre, dat, nfolds = 5, param = seq(0, 0.15, 0.01), sp.var = 1:4)
cv.prune$best.lambda
cv.prune$best.tree
set.seed(1)
dat <- gdataM(n = 1000, depth = 2, beta1 = 3, beta2 = 1)
# Build a forest with 100 trees
forest <- Build.RF.ITR(dat, col.y="y", col.trt="trt", col.prtx="prtx", split.var=1:4, ntree=100)
# Calculate variable importance measures
Variable.Importance.ITR(forest)
library(devtools)
?devtools
setwd("C:/Users/Kevin/GoogleDrive/ITR-Tree/ITR.Forest/R")
setwd("C:/Users/Kevin/GoogleDrive/ITR-Tree/ITR.Forest/")
document()
install("ITR.forest")
install("ITR.Forest")
load_all()
install()
library(ITR.Forest)
dat <- rdat(1000)
grow.ITR(dat, split.var=1:4)
library(ITR.Forest)
